#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x

reload_nginx () {
  case "$DOKKU_DISTRO" in
    ubuntu)
      sudo /etc/init.d/nginx reload > /dev/null
      ;;

    opensuse)
      sudo /sbin/service nginx reload > /dev/null
      ;;
  esac
}

letsencrypt_acmeproxy_on () {
  dokku_log_info1 "Enabling ACME proxy for $APP..."

  if [[ ! -d "$APP_ROOT/nginx.conf.d" ]]; then
    mkdir "$APP_ROOT/nginx.conf.d"
  fi

  rm -f "$APP_ROOT/nginx.conf.d/letsencrypt.conf"
  cp "$(dirname "$0")/templates/letsencrypt.conf" "$APP_ROOT/nginx.conf.d"
  sed -i "s,{ACMEPORT},$ACMEPORT," "$APP_ROOT/nginx.conf.d/letsencrypt.conf"

  reload_nginx
}

letsencrypt_acmeproxy_off() {
  dokku_log_info1 "Disabling ACME proxy for $APP..."

  if [[ -f "$APP_ROOT/nginx.conf.d/letsencrypt.conf" ]]; then
    rm "$APP_ROOT/nginx.conf.d/letsencrypt.conf"
  fi

  reload_nginx
}

letsencrypt_update () {
  dokku_log_info1 "Updating letsencrypt docker image..."
  docker pull quay.io/letsencrypt/letsencrypt:latest
  dokku_log_verbose "done"
}

letsencrypt_link () {
  PRIMARY_DOMAIN=$(dokku url "$APP" | sed -re "s,https?://,,")
  LIVE="$LETSENCRYPT_ROOT/etc/live/$PRIMARY_DOMAIN"
  mkdir -p "$APP_SSL_ROOT"
  ln -nsf "$LIVE/privkey.pem" "$APP_SSL_ROOT/server.key"
  ln -nsf "$LIVE/fullchain.pem" "$APP_SSL_ROOT/server.crt"
}

letsencrypt_create_root () {
  # Set up folders
  if [ ! -d "$LETSENCRYPT_ROOT" ]; then
    mkdir -p "$LETSENCRYPT_ROOT/etc/"{live,archive}
    mkdir -p "$LETSENCRYPT_ROOT/var"
    chgrp dokku "$LETSENCRYPT_ROOT/etc/"{live,archive}
    chmod 710 "$LETSENCRYPT_ROOT/etc/"{live,archive}
  fi
}

letsencrypt_get_server() {
  # only cat if file exists
  [ ! -f "$LETSENCRYPT_SERVERFILE" ] || cat $LETSENCRYPT_SERVERFILE
}

letsencrypt_acme () {
  letsencrypt_create_root

  DOMAINS=$(dokku urls "$APP" | sed -re "s,https?://,," | uniq)
  dokku_log_info1 "Getting letsencrypt certificate for $APP..."

  DOMAIN_ARGS=''
  for DOMAIN in $DOMAINS; do
    dokku_log_verbose " - Domain '$DOMAIN'"
    DOMAIN_ARGS="$DOMAIN_ARGS -d $DOMAIN"
  done

  LETSENCRYPT_SERVER=$(letsencrypt_get_server)
  if [ ! -z "$LETSENCRYPT_SERVER" ]; then
    LETSENCRYPT_SERVER="--server $LETSENCRYPT_SERVER"
  fi

  # if we have a prompt, then we have a tty according to the LDP (http://www.tldp.org/LDP/abs/html/intandnonint.html)
  [[ -t 1 ]] && DOKKU_RUN_OPTS="-it"

  # run letsencrypt as a docker container using "certonly" mode
  # port 80 of the standalone webserver will be forwarded by the proxy
  docker run $DOKKU_RUN_OPTS --rm \
    -p $ACMEPORT:80 \
    -v "$LETSENCRYPT_ROOT/etc:/etc/letsencrypt" \
    -v "$LETSENCRYPT_ROOT/var:/var/lib/letsencrypt" \
    quay.io/letsencrypt/letsencrypt:latest \
    $LETSENCRYPT_SERVER \
    $DOMAIN_ARGS \
    -a standalone \
    --standalone-supported-challenges http-01 \
    certonly \
    --renew-by-default \
    --agree-tos

  # NOTE: use 'dokku letsencrypt:server myapp staging' while debugging!

  letsencrypt_link
  nginx_build_config "$APP"
}
